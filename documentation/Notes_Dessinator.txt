Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-09-12T16:28:47+02:00

====== Notes Dessinator ======
Created Tuesday 12 September 2017

This notebook relates to the Dessinator website game.
It is a collection of web-based games around drawing with multiple people over the web.

Some sections relates to the design and the choices behind it, other to the experiences learn from making the application, what where the roadblocks and what is to plan

[[+Create A room Page]]

[[+Pintclone game design]]

[[+Backend API specification]]

[[+market research]]

[[+Roadblocks & current issues]]

[[+Potential names]]

[[+Devlog]]

[[+devops]]

> Concider using assayer crate for validation
> concider accepting an RC in GameMsg send channel as to avoid copying data
> Concider moving game logic in its own module
> Figure out how to URL-decode URLs so as to avoid surprises with %20 etc

===== Websocket spec to implement =====
* 1009 terminating because message is too big
* 1008 Generic termminate (ie: did not respect API spec)
* Use ''sub-protocol'' fields to specify which version of the API (and which data) is being transmitted)
* Use binary data using something like ''protobuff'' 

===== Dreams =====
* Handle explicitely user names in Main.hs.
	* Issue being that information is redundant.
	* This solves the problem of incoherent REST API calls for connecting to rooms.
* Implement test suite based on specification state machines / formally test the state machines

===== Current roadmap =====
* Mask room input in join page
* Make sure client handles properly joining in middle of Drawing & leaving artist
* Improve readability of logging for websockets:
	* Implement show in API.hs
	* merge into single entry request+response
	* better look for requests
* In join page, when changing name, put a confirmation button instead of automatically redirecting
* Improve how the backend handles stuff
	* Sanitize names and roomids in backend
	* Implement game logic
	* Clean up when Rooms stay empty for too long
* Update API (Lobby master [bool â†’ name]) so lobby broadcasting is independent of the connected it is sending to.
* Implement "cooldown" on people leaving so they have a chance to rejoin.
* Add tests to the backend
* Fix chat
	* Frontend: create interface (for chat, and word to guess etc)
	* Backend: handle guesses and stuff, implement "SendTo"
* Study Haskell websocket package to see if the following is possible:
	* Be aware of ping between server and client
	* Use this to slow down packet redistribution according to average ping.
	* Compute "real" guess time according to ping  so it is fair to everyone.

