Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-09-12T17:58:20+02:00

====== Backend API specification ======
Created Tuesday 12 September 2017

====== Summary ======


'''
-- LOBBY --

/lobby
	/index.html : welcome page for connecting to a game

-- GAMES --

/games
	/classic : The game in which you draw and other guesses

-- ROOMS --

/rooms
	/create POST json : create a new room and get the room name as return value
	/join POST json : Attempt to join a room, return the game type if successful

-- MISC --
/ws : Base url for all websocket endpoints
/ports.js : Shared code for javascript ports.
any: (added to existing path to get relevent resource)
	+/stylesheet.css : Css style
	+/code.js : Generated javascript code
'''



====== Types ======

Specifications of the types used in the API. When a value is specified to be of a certain type, the client must follow it or the request will be refused.

=== Game ===
''Game = "classic"''
The string name of an avaliable game. Any other string will be refused.
* Currently there is only one value possible for it.

=== Name ===
''Name ~= [[::unicode_alphanum::] _-]{2-100}''
A user name. Can be arbitrary unicode alphanumericals.
* TODO: handle spaces at the start and end of the string in specification.
* This is user-generated and shown to other users!
* Will be refused if the size (in bytes, as opposed to characters) is greater than a certain ammount

=== RoomID ===
''RoomID ~= [A-Z][a-z]+\\.[A-Z][a-z]*[A-Z]?[a-z]+''
A room id, let identify a unique party going on currently.
* Server-generated. Only values that you got (directly or indirectly) from the server will be accepted,  most likely.


====== Static pages ======

==== Lobby welcome page ====
''GET /lobby/index.html''
Html page. User interface to select whether to create or join a game.

==== Classic mode ====
''GET /games/classic/index.html ''
Html page. User interface for classic game mode

==== Join form ====
 ''GET /join/:RoomID''
Redirects to a page that let you join given '':RoomID''

 ''GET /join/*/uid''
A form that let you submit your username to join a specific room, generated by the server. Only one user can join a game within a single uid

====== Resources ======

===== Rooms =====

==== Create a room ====
''POST /rooms/create {username: Name, game: Game}''
Create a room for given ''game''.
	* Returns:
		* __201 created__ RoomID | The Body is the RoomID to join.
		* __404 not found__ | the game doesn't exist.
		* __400 bad request__ | ''username'' is not a valid name.

==== Join a Room ====
''POST /rooms/join {roomid: RoomID, username: Name}''
Attempts to join an existing room ''roomid'' as ''username'' . This will "open" a websocket port at location ''/ws/:roomid/:username'' that the user can connect to to play the game
	* Returns:
		* __200 success__ Game | The game you are connecting to.
		* __404 not found__ | ''roomid'' is not a room.
		* __409 conflict__ | ''roomid'' is indeed a room, but ''username'' already taken.
		* __400 bad request__ | ''username'' is not a valid name.

==== Report an error ====
''POST /report plaintext''
Send to server an error report, to log. Note that the log string must not be larger than 2^14 bytes

====== Websockets ======

===== Pintclone =====

==== Types ====
notes:
* list of things between () is represented as a list of fixed size in json
* **regarding game event sync:** The history is sent in order of the most recent to the oldest in ''sync'' messages.
'''
Point ~= (X, Y) where X = Y = [-2^31; 2^31[ : Int
Score = Int
Color ~= #[0-9a-f]{6}
Size = Float
ChatContent = String

RoundScore
	= { artist: Score}
	| { guessed: Score}
	| { failed: () }
	| { absent: () }
	
RoundState =
	{ drawing: Drawing
	, artist: Name
	, timeout: Int
	}

Scoreboard = [ (Name, [RoundScore]) ]

Drawing = [ (Point, [ Point ], Color, Size) ]

GameState =
	{ scores: Scoreboard
	, screen: GameScreen
	, history: [ VisibleGameEvent ]
	}

GameScreen
	= { scores: () }
	| { endsummary: () }
	| { round: RoundState }
	| { lobby: { master: Name } }

CanvasMsg
	= { start: ( Point, Color, Size ) }
	| { end: () }
	| { continue: Point }

GameReq
	= { canvas: CanvasMsg }
	| { chat: ChatContent }
	| { sync: () }
	| { start: () }

ChatMsg =
	{ content: ChatContent
	, author: Name
	}

WordGuess
	= { artist: String }
	| { guess: Int }

RoundStart =
	{ timeout: Int
	, artist: Name
	, word: WordGuess
	}

VisibleGameEvent
	= { guessed: Name }
	| { left: Name }
	| { joined: Name }
	| { message: ChatMsg }
	| { syncstart: Name }
	| { syncover: String }

HiddenGameEvent
	= { correct: String }
	| { timeoutsync: Int }
	| { sync: GameState }
	| { mastery: () }
	| { over: (String, [ (Name, RoundScore) ]) }
	| { start: RoundStart }
	| { reveal: (Int, Char) }

GameMsg
	= { canvas: CanvasMsg }
	| { event: VisibleGameEvent | HiddenGameEvent }
'''


==== Websockets ====
''GET /ws/:RoomID/:Name''
'''
/ws/:RoomID/:Name
'''
 is only available after having ''Post''ed the '':Name'' in the right '':RoomID'' using the ''/rooms/join'' resource.
The URL of the information websocket, used to recieve informations about the state of the room. does only send data.
	* Accepts: GameReq
	* Sends: GameMsg
